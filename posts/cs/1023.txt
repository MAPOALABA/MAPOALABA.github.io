1. 교착상태 발생 조건 (출제)
    1. 상호배제
    2. 비선점
    3. 보유대기(점유와 대기)
    4. 순환대기(환형대기)

2. 교착상태 해결 방안 (출제)
    1. 예방
        - 데드락의 4가지 조건 중 하나를 차단해서 데드락 상태에 들어가지 못하도록 하는 것
        - 비용 ⬆︎, 좋은 방법 X
    2. 회피 (가장 많이 쓰는 방법)
        - 은행 알고리즘 (계산법 출제)
            - 모든 자원을 자원 유형으로 그룹
            - 안정 상태
                - 프로세스가 작업을 유한 시간 내에 완료되도록 보장
            - 불안정 상태
                - 교착 상태에 있지 않지만 프로세스가 작업을 유한 시간 내에 완료되도록 보장 못함
        - 자원에 번호를 매겨서 오름(내림)차순으로만 자원을 할당
    3. 회복
        - 특별한 알고리즘이 없기에 경험으로 해결

3. 메모리 분할 방식 (출제)
    1. 고정 분할
        1. 내부 단편화
        2. 외부 단편화
    2. 가변 분할
        - 고정 분할 단편화에서 낭비되는 값을 줄이기 위함

4. 메모리 압축(집약)과 통합 (solution)
    1. 압축(집약)
        - 떨어져있는 단편화들을 합침
    2. 통합
        - 붙어 있는 단편화들을 합침

5. 메모리 관리 정책
    1. 반입 정책 (시기)
        - 언제 가져올건지
            - 요구 반입
            - 예상 반입
    2. 배치 정책 (장소)
        - 어디에 가져올건지
            - 최초 적합
            - 최적 적합
            - 최악 적합
    3. 교체 정책 (대상)
        - 누구와 교체할건지
        - 어떤 페이지와 교체할건지
            - OPT
                - 앞으로 가장 오랫동안 사용되지 않을 페이지 교체 (미래형)
            - FIFO

            - LRU
                - 가장 오랫동안 사동되지 않은 페이지 교체 (과거형)
            - LFU
                - 참조 빈도가 가장 작은 페이지 교체
            - MFU
                - 참조 빈도가 가장 많은 페이지 교체
            - NUR
                - 최근에 사용하지 않은 페이지 교체




11/20

디렉토리 구성

1. 단일 디렉토리
    
    - 모든 파일이 유일한 이름 가져야함
    - 파일 관리 복잡

2. 2단계 디렉토리

    - 마스터 파일 디렉토리(MDF), 유저 파일 디렉토리(UDF)로 구성

3. 트리 디렉토리

    - 유닉스, 리눅스에서 사용 

4. 비순환 디렉토리

    - 고아 포인터 발생 가능

5. 일반적인 그래프 디렉토리

    - 쓰레기 수집 필요

<!-- 공간할당 방법

1. 연속할당

    - 장점 : 빠른 액세스, 디렉토리 단순화
    - 단점 : 공간이 있어도 사용못하는 경우 발생

2. 링크 리스트

    - 장점 :
    - 단점 : 한개라도 잃어버리면 모두 못봄

3. 색인 블럭

    - 장점 : 탐색이 빠름
    - 단점 : 블럭을 삽입하려할때 색인 블럭을 완전히 재구성 해야함, 기억장치 낭비됨 -->


보호 기법

1. 접근 제어 기법

    1. 영역 리스트

    - 행은 영역, 열은 객체, 각 항은 접근 권한의 집합으로 구성

    2. 제어 리스트

        - 제어 리스트
            : 행(영역)을 더 중요시

        - 권한 리스트
            : 열(객체)을 더 중요시

        - 락키

    3. 