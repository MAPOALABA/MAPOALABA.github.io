[{"content":" 교착상태 발생 조건 (출제)\n상호배제 비선점 보유대기(점유와 대기) 순환대기(환형대기) 교착상태 해결 방안 (출제)\n예방 데드락의 4가지 조건 중 하나를 차단해서 데드락 상태에 들어가지 못하도록 하는 것 비용 ⬆︎, 좋은 방법 X 회피 (가장 많이 쓰는 방법) 은행 알고리즘 (계산법 출제) 모든 자원을 자원 유형으로 그룹 안정 상태 프로세스가 작업을 유한 시간 내에 완료되도록 보장 불안정 상태 교착 상태에 있지 않지만 프로세스가 작업을 유한 시간 내에 완료되도록 보장 못함 자원에 번호를 매겨서 오름(내림)차순으로만 자원을 할당 회복 특별한 알고리즘이 없기에 경험으로 해결 메모리 분할 방식 (출제)\n고정 분할 내부 단편화 외부 단편화 가변 분할 고정 분할 단편화에서 낭비되는 값을 줄이기 위함 메모리 압축(집약)과 통합 (solution)\n압축(집약) 떨어져있는 단편화들을 합침 통합 붙어 있는 단편화들을 합침 메모리 관리 정책\n반입 정책 (시기) 언제 가져올건지 요구 반입 예상 반입 배치 정책 (장소) 어디에 가져올건지 최초 적합 최적 적합 최악 적합 교체 정책 (대상) 누구와 교체할건지 어떤 페이지와 교체할건지 OPT\n앞으로 가장 오랫동안 사용되지 않을 페이지 교체 (미래형) FIFO\nLRU\n가장 오랫동안 사동되지 않은 페이지 교체 (과거형) LFU\n참조 빈도가 가장 작은 페이지 교체 MFU\n참조 빈도가 가장 많은 페이지 교체 NUR\n최근에 사용하지 않은 페이지 교체 11/20\n디렉토리 구성\n단일 디렉토리\n모든 파일이 유일한 이름 가져야함 파일 관리 복잡 2단계 디렉토리\n마스터 파일 디렉토리(MDF), 유저 파일 디렉토리(UDF)로 구성 트리 디렉토리\n유닉스, 리눅스에서 사용 비순환 디렉토리\n고아 포인터 발생 가능 일반적인 그래프 디렉토리\n쓰레기 수집 필요 보호 기법\n접근 제어 기법\n영역 리스트 행은 영역, 열은 객체, 각 항은 접근 권한의 집합으로 구성 제어 리스트\n제어 리스트 : 행(영역)을 더 중요시\n권한 리스트 : 열(객체)을 더 중요시\n락키\n","permalink":"https://mapoalaba.github.io/posts/cs/1023/","summary":"교착상태 발생 조건 (출제)\n상호배제 비선점 보유대기(점유와 대기) 순환대기(환형대기) 교착상태 해결 방안 (출제)\n예방 데드락의 4가지 조건 중 하나를 차단해서 데드락 상태에 들어가지 못하도록 하는 것 비용 ⬆︎, 좋은 방법 X 회피 (가장 많이 쓰는 방법) 은행 알고리즘 (계산법 출제) 모든 자원을 자원 유형으로 그룹 안정 상태 프로세스가 작업을 유한 시간 내에 완료되도록 보장 불안정 상태 교착 상태에 있지 않지만 프로세스가 작업을 유한 시간 내에 완료되도록 보장 못함 자원에 번호를 매겨서 오름(내림)차순으로만 자원을 할당 회복 특별한 알고리즘이 없기에 경험으로 해결 메모리 분할 방식 (출제)","title":""}]